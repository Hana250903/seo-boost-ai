// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace SEOBoostAI.Repository.Models;

public partial class SEOBoostAIContext : DbContext
{
    public SEOBoostAIContext()
    {
    }

    public SEOBoostAIContext(DbContextOptions<SEOBoostAIContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuditReport> AuditReports { get; set; }

    public virtual DbSet<ContentOptimization> ContentOptimizations { get; set; }

    public virtual DbSet<Element> Elements { get; set; }

    public virtual DbSet<Keyword> Keywords { get; set; }

    public virtual DbSet<RankTracking> RankTrackings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    /// <summary>
    /// Retrieves a connection string by name from the application's appsettings.json configuration file.
    /// </summary>
    /// <param name="connectionStringName">The name of the connection string to retrieve.</param>
    /// <returns>The connection string associated with the specified name.</returns>
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    /// <summary>
    /// Configures the DbContext to use SQL Server with the "DefaultConnection" connection string and disables change tracking by default.
    /// </summary>
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    /// <summary>
    /// Configures the entity mappings, relationships, and constraints for the database context using the Entity Framework Core Fluent API.
    /// </summary>
    /// <param name="modelBuilder">The builder used to construct the model for the context.</param>

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuditReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AuditRep__3214EC273D8BD712");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PassedCheck)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<ContentOptimization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ContentO__3214EC27BC0CE92B");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ContentLenght)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IncludeCitation).HasDefaultValue(true);
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OriginalContent).IsRequired();
            entity.Property(e => e.ReadabilityLevel)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Seoscore).HasColumnName("SEOScore");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<Element>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Elements__3214EC2703350B87");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AuditReportId).HasColumnName("AuditReportID");
            entity.Property(e => e.CurrentValue)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Element1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Element");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.AuditReport).WithMany(p => p.Elements)
                .HasForeignKey(d => d.AuditReportId)
                .HasConstraintName("FK__Elements__AuditR__5535A963");
        });

        modelBuilder.Entity<Keyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Keywords__3214EC273862EE48");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Competition)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Cpc)
                .HasColumnType("money")
                .HasColumnName("CPC");
            entity.Property(e => e.Intent)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Keyword1)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Keyword");
            entity.Property(e => e.SearchKeyword).HasMaxLength(100);
            entity.Property(e => e.Trend)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<RankTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RankTrac__3214EC276D11E776");

            entity.ToTable("RankTracking");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Keyword).HasMaxLength(100);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC274C26F24D");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E4211162B7").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.GoogleId).HasColumnName("GoogleID");
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .HasDefaultValue("User");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}