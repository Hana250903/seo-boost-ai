// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace SEOBoostAI.Repository.Models;

public partial class SEOBoostAIContext : DbContext
{
    public SEOBoostAIContext()
    {
    }

    public SEOBoostAIContext(DbContextOptions<SEOBoostAIContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuditReport> AuditReports { get; set; }

    public virtual DbSet<ContentOptimization> ContentOptimizations { get; set; }

    public virtual DbSet<Element> Elements { get; set; }

    public virtual DbSet<Keyword> Keywords { get; set; }

    public virtual DbSet<RankTracking> RankTrackings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuditReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AuditRep__3214EC274D7722AB");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CriticalIssue)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Opportunity)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PassedCheck)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Warning)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.AuditReports)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AuditRepo__UserI__5441852A");
        });

        modelBuilder.Entity<ContentOptimization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ContentO__3214EC272351F7D2");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ContentLenght)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IncludeCitation).HasDefaultValue(true);
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OriginalContent).IsRequired();
            entity.Property(e => e.ReadabilityLevel)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Seoscore).HasColumnName("SEOScore");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.ContentOptimizations)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ContentOp__UserI__59FA5E80");
        });

        modelBuilder.Entity<Element>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Elements__3214EC27F85C08B0");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CurrentValue)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Element1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Element");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Keyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Keywords__3214EC27ED3B039B");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Competition)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Cpc)
                .HasColumnType("money")
                .HasColumnName("CPC");
            entity.Property(e => e.Intent)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Keyword1)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Keyword");
            entity.Property(e => e.SearchKeyword).HasMaxLength(100);
            entity.Property(e => e.Trend)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Keywords)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Keywords__UserID__4E88ABD4");
        });

        modelBuilder.Entity<RankTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RankTrac__3214EC2736F4BB46");

            entity.ToTable("RankTracking");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Keyword).HasMaxLength(100);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.RankTrackings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RankTrack__UserI__5165187F");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC27EA834165");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E478F4CEDB").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.GoogleId).HasColumnName("GoogleID");
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .HasDefaultValue("User");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}